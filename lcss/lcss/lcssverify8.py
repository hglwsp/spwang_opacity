from z3 import *
import numpy as np
import math

def relu(x):
    res = If(x>0,x,0)
    return res
def sinn(x):
    res = x - (1/6 * x*x*x) + (1/120 * x*x*x*x*x)
    return res


pi = 3.1415926
x1,x2,x3,x4,x5 = Reals('x1 x2 x3 x4 x5')

u = -0.470923432426168*relu(-1.26518090341552*x1 - 1.12184753233757*x2 - 0.0302033305188276*x3 - 0.087895535631396*x4 - 0.20163411092075*x5 + 0.0118067408892254) \
    - 8.25706947759208e-5*relu(-1.1665417255843*x1 - 0.207047193055818*x2 + 0.886294931863817*x3 - 1.78624818282644*x4 + 1.07461298632098*x5 + 0.268306180693544) \
    + 0.00183186739665142*relu(-0.504715077084289*x1 - 0.684765867573058*x2 + 2.51898434145435*x3 - 0.614414527505984*x4 + 0.0284641417300487*x5 - 2.11108665530771) \
    + 0.00526338993029025*relu(-0.378776860337727*x1 + 0.0680590419846155*x2 - 0.131370148134278*x3 + 0.0822336668906115*x4 - 0.821095886201963*x5 + 0.426792921873452) \
    + 0.0010150055204702*relu(0.0187327002480915*x1 + 0.660922585233511*x2 - 0.268247358228266*x3 - 0.121148947296469*x4 - 0.0976357668671579*x5 - 0.499980831828678) \
    + 0.00522667001805391*relu(0.226693130283007*x1 - 0.235472806414236*x2 - 0.0256548937762095*x3 - 0.213585477813047*x4 + 0.56744476664502*x5 + 0.27573551871504) \
    + 0.00921407062415518*relu(0.513998422597921*x1 - 0.48951925100243*x2 - 1.4305453755988*x3 + 0.170626174311173*x4 - 1.59409952391156*x5 + 0.501732576722678)\
    + 0.00406739014509696*relu(0.76187496487278*x1 - 1.22393095724882*x2 + 0.0163599498894474*x3 - 0.075850578938561*x4 - 0.129460307266293*x5 - 0.246071022896371) \
    - 0.00996384456698388






f_x1 = 0.1*x1 + x5
f_x2 = 0.1*x2 + u
f_x3 = sinn(2.5*pi*x1)+1
f_x4 = sinn(2.5*pi*x2)+1


B = -0.178821627469727*relu(-1.83239187945249*x1 - 0.974662945494001*x2 + 0.253268162014687*x3 + 0.461344981237625*x4 - 1.1652420985142) \
    + 1.14793408791834*relu(-0.941050085874942*x1 + 0.954969375449183*x2 - 0.752809923251003*x3 + 1.29321610400965*x4 + 0.284230042758132) \
    - 0.819709922361998*relu(-0.84782822543251*x1 + 0.158808398904429*x2 + 0.953395713237085*x3 + 1.47487654055817*x4 - 0.283828841167314) \
    - 0.215688476211166*relu(-0.841670829207965*x1 + 0.434979127022252*x2 - 0.484815593636776*x3 - 0.393825901829728*x4 + 0.136761379938627)\
    - 0.260627775000812*relu(-0.681823624699248*x1 + 0.0756593104185499*x2 + 0.623142350992856*x3 + 0.217368283801788*x4 - 0.499296480001199)\
    - 0.5416980295035*relu(-0.648592080133031*x1 - 1.01098399348677*x2 - 0.274932739518152*x3 + 0.259565629082049*x4 + 0.576045525779955) \
    - 0.166360855995417*relu(-0.632528050046655*x1 + 0.556953583959397*x2 - 0.553612423257007*x3 + 0.102472586790087*x4 + 0.0478537030717333) \
    - 0.562398998211207*relu(-0.325106573369156*x1 - 0.20049040540304*x2 + 0.267316339579572*x3 - 0.16375175879347*x4 - 0.277234930335916) \
    - 1.08977919003315*relu(-0.303152026095603*x1 - 0.444712087454651*x2 + 0.476889887510557*x3 - 0.618328956317904*x4 + 1.05097816789058) \
    - 0.421022009224556*relu(-0.194661073368597*x1 - 0.252050621858994*x2 - 1.03420791978933*x3 + 0.931863428004989*x4 + 1.185390679528) \
    + 0.12247034577463*relu(0.187132265981662*x1 - 0.235478094884005*x2 + 1.84820661567789*x3 + 0.65404285934956*x4 - 1.20073727680062) \
    - 0.0120876620711737*relu(0.302390500063213*x1 - 0.256802363841616*x2 + 0.371373673605557*x3 + 0.0781734201669902*x4 + 0.959958765585388) \
    + 0.0232399536254804*relu(0.592076318258881*x1 - 0.010776737183623*x2 - 1.23193923216761*x3 + 0.421482925072058*x4 - 0.822035583229121) \
    + 1.19049466442333*relu(0.663088337738924*x1 + 0.321022227439318*x2 + 1.26576777283073*x3 - 0.559130127249885*x4 + 0.256151159448231) \
    + 0.892939215256324*relu(1.07704486502843*x1 - 0.243827425194516*x2 - 0.0112544927728989*x3 + 0.279261874484514*x4 - 0.257710701400149) \
    + 0.00458093318030307*relu(1.23459463305203*x1 - 0.647229697730976*x2 + 0.0539082289186737*x3 + 0.448448351278777*x4 + 0.227930413246625) \
    + 0.447124876900993



B_f = -0.178821627469727*relu(-1.83239187945249*f_x1 - 0.974662945494001*f_x2 + 0.253268162014687*f_x3 + 0.461344981237625*f_x4 - 1.1652420985142) \
      + 1.14793408791834*relu(-0.941050085874942*f_x1 + 0.954969375449183*f_x2 - 0.752809923251003*f_x3 + 1.29321610400965*f_x4 + 0.284230042758132) \
      - 0.819709922361998*relu(-0.84782822543251*f_x1 + 0.158808398904429*f_x2 + 0.953395713237085*f_x3 + 1.47487654055817*f_x4 - 0.283828841167314) \
      - 0.215688476211166*relu(-0.841670829207965*f_x1 + 0.434979127022252*f_x2 - 0.484815593636776*f_x3 - 0.393825901829728*f_x4 + 0.136761379938627) \
      - 0.260627775000812*relu(-0.681823624699248*f_x1 + 0.0756593104185499*f_x2 + 0.623142350992856*f_x3 + 0.217368283801788*f_x4 - 0.499296480001199) \
      - 0.5416980295035*relu(-0.648592080133031*f_x1 - 1.01098399348677*f_x2 - 0.274932739518152*f_x3 + 0.259565629082049*f_x4 + 0.576045525779955) \
      - 0.166360855995417*relu(-0.632528050046655*f_x1 + 0.556953583959397*f_x2 - 0.553612423257007*f_x3 + 0.102472586790087*f_x4 + 0.0478537030717333) \
      - 0.562398998211207*relu(-0.325106573369156*f_x1 - 0.20049040540304*f_x2 + 0.267316339579572*f_x3 - 0.16375175879347*f_x4 - 0.277234930335916) \
      - 1.08977919003315*relu(-0.303152026095603*f_x1 - 0.444712087454651*f_x2 + 0.476889887510557*f_x3 - 0.618328956317904*f_x4 + 1.05097816789058) \
      - 0.421022009224556*relu(-0.194661073368597*f_x1 - 0.252050621858994*f_x2 - 1.03420791978933*f_x3 + 0.931863428004989*f_x4 + 1.185390679528) \
      + 0.12247034577463*relu(0.187132265981662*f_x1 - 0.235478094884005*f_x2 + 1.84820661567789*f_x3 + 0.65404285934956*f_x4 - 1.20073727680062) \
      - 0.0120876620711737*relu(0.302390500063213*f_x1 - 0.256802363841616*f_x2 + 0.371373673605557*f_x3 + 0.0781734201669902*f_x4 + 0.959958765585388)\
      + 0.0232399536254804*relu(0.592076318258881*f_x1 - 0.010776737183623*f_x2 - 1.23193923216761*f_x3 + 0.421482925072058*f_x4 - 0.822035583229121) \
      + 1.19049466442333*relu(0.663088337738924*f_x1 + 0.321022227439318*f_x2 + 1.26576777283073*f_x3 - 0.559130127249885*f_x4 + 0.256151159448231) \
      + 0.892939215256324*relu(1.07704486502843*f_x1 - 0.243827425194516*f_x2 - 0.0112544927728989*f_x3 + 0.279261874484514*f_x4 - 0.257710701400149) \
      + 0.00458093318030307*relu(1.23459463305203*f_x1 - 0.647229697730976*f_x2 + 0.0539082289186737*f_x3 + 0.448448351278777*f_x4 + 0.227930413246625) \
      + 0.447124876900993


#3 conditions
print("start verify init")
#Initial conditions
s = Solver()
s.add(And(0 <= x1, x1 <= 0.1, x2 == x1 + 0.6,
          x3 == 0, x4 == 0,
          B > 1))
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify unsafe1")
#unsafe condition
s = Solver()
s.add(And(0 <= x1,  x1<= 1.6, 0 <= x2, x2<= 1.6,
          0 <=x3, x3 <= 1.6, 0 <= x4, x4<= 1.6,
           x2 - x1 > 1.2,
          B < 1))
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify unsafe2")
#unsafe condition
s = Solver()
s.add( And(0 <= x1,  x1<= 1.6, 0 <= x2, x2<= 1.6,
          0 <=x3, x3 <= 1.6, 0 <= x4, x4<= 1.6,
           x1 - x2 > 1.2,
          B < 1))
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify diff")
s = Solver()
s.add( And(0 <= x1, x1 <= 1.6, 0 <= x2, x2 <= 1.6,
          0 <= x3, x3 <= 1.6, 0 <= x4, x4 <= 1.6,
          -0.01 <= x5, x5 <= 0.01,-0.01 <= u, u <= 0.01,
          0 <= f_x1, f_x1 <= 1.6, 0 <= f_x2, f_x2 <= 1.6,
          0 <= f_x3, f_x3 <= 1.6, 0 <= f_x4, f_x4 <= 1.6,
          B_f - B < 0 ))
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")
print("success")


