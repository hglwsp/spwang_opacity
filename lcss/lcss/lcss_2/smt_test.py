from z3 import *
import torch.nn as nn

x1,x2,v1,v2 = Reals('x1 x2 v1 v2')
h = (x1 - x2) * (x1 - x2)

#relu
def relu(x):
    res = If(x>0,x,0)
    return res




#controller
u1 = -0.0425142598726182*relu(-2.17606326540943*x1 - 1.81128698556073*v1 - 0.000116114326871085)\
     - 2.46713912389448*relu(-0.0680122780456623*x1 + 0.965179033508519*v1 + 0.47259259041444) \
     + 1.86046338603535*relu(0.264394127296566*x1 + 1.17841006599559*v1 + 0.0984131283547919)\
     + 0.879326800545555*relu(0.552825309096861*x1 - 0.266327099997274*v1 + 0.336279484347106)\
     - 1.35473709698414*relu(0.845912830692603*x1 - 0.310737419985109*v1 + 0.0353039954145404)\
     + 0.783953999440739

u2 = -0.0425142598726182*relu(-2.17606326540943*x2 - 1.81128698556073*v2 - 0.000116114326871085)\
     - 2.46713912389448*relu(-0.0680122780456623*x2 + 0.965179033508519*v2 + 0.47259259041444) \
     + 1.86046338603535*relu(0.264394127296566*x2 + 1.17841006599559*v2 + 0.0984131283547919)\
     + 0.879326800545555*relu(0.552825309096861*x2 - 0.266327099997274*v2 + 0.336279484347106)\
     - 1.35473709698414*relu(0.845912830692603*x2 - 0.310737419985109*v2 + 0.0353039954145404)\
     + 0.783953999440739

#system
f_x1 = x1 + v1 + 0.5 * u1
f_x2 = x2 + v2 + 0.5 * u2
f_v1 = v1 + u1
f_v2 = v2 + u2

#barrier
B = 0.517265648056716*relu(-3.65368453216457*x1 + 0.331298294361741*x2 + 0.789987344461107*v1 - 0.598507610184795*v2 - 0.125388379289722)\
    - 0.234570586900877*relu(-1.30631908383916*x1 + 0.487877354815537*x2 - 0.425458412519965*v1 + 0.933152752511654*v2 - 0.502690353651211)\
    + 0.360969532995761*relu(-0.132424703387316*x1 - 1.74941585094556*x2 + 0.621663511325193*v1 + 1.7082264898012*v2 + 0.890510557683113)\
    - 0.829488827449247*relu(0.0525035873160005*x1 - 0.0750375916437057*x2 + 1.2509358854434*v1 + 0.433296584519242*v2 - 0.0631735981876685)\
    - 0.53481859055458*relu(0.0841382031234471*x1 - 1.15043076657967*x2 - 0.225169264918237*v1 - 0.994862412736916*v2 - 0.566959983144979)\
    - 0.455582893559385*relu(0.937300252884777*x1 + 0.25289621246787*x2 + 0.243595062435034*v1 + 0.559130887270356*v2 - 1.71326483265181)\
    - 0.78241448448088*relu(1.11595205859512*x1 + 0.0470350436966434*x2 + 0.386814997774443*v1 - 0.309465046601276*v2 - 0.021214435922837)\
    - 0.270789672757662*relu(1.14866217444813*x1 - 0.191752816604831*x2 + 0.833062622796213*v1 + 1.30270029023017*v2 - 0.891308797675867)\
    + 0.433805699764568*relu(1.28324986087431*x1 + 0.816751137418288*x2 - 0.386762044412576*v1 - 1.11349972430576*v2 + 1.45827020313879)\
    + 0.577782363845043*relu(2.07248284485251*x1 - 0.473712097150558*x2 + 0.230081727463192*v1 + 0.0598880389207554*v2 - 1.22880612439671)\
    - 0.903855770921141

B_f =  0.517265648056716*relu(-3.65368453216457*f_x1 + 0.331298294361741*f_x2 + 0.789987344461107*f_v1 - 0.598507610184795*f_v2 - 0.125388379289722)\
    - 0.234570586900877*relu(-1.30631908383916*f_x1 + 0.487877354815537*f_x2 - 0.425458412519965*f_v1 + 0.933152752511654*f_v2 - 0.502690353651211)\
    + 0.360969532995761*relu(-0.132424703387316*f_x1 - 1.74941585094556*f_x2 + 0.621663511325193*f_v1 + 1.7082264898012*f_v2 + 0.890510557683113)\
    - 0.829488827449247*relu(0.0525035873160005*f_x1 - 0.0750375916437057*f_x2 + 1.2509358854434*f_v1 + 0.433296584519242*f_v2 - 0.0631735981876685)\
    - 0.53481859055458*relu(0.0841382031234471*f_x1 - 1.15043076657967*f_x2 - 0.225169264918237*f_v1 - 0.994862412736916*f_v2 - 0.566959983144979)\
    - 0.455582893559385*relu(0.937300252884777*f_x1 + 0.25289621246787*f_x2 + 0.243595062435034*f_v1 + 0.559130887270356*f_v2 - 1.71326483265181)\
    - 0.78241448448088*relu(1.11595205859512*f_x1 + 0.0470350436966434*f_x2 + 0.386814997774443*f_v1 - 0.309465046601276*f_v2 - 0.021214435922837)\
    - 0.270789672757662*relu(1.14866217444813*f_x1 - 0.191752816604831*f_x2 + 0.833062622796213*f_v1 + 1.30270029023017*f_v2 - 0.891308797675867)\
    + 0.433805699764568*relu(1.28324986087431*f_x1 + 0.816751137418288*f_x2 - 0.386762044412576*f_v1 - 1.11349972430576*f_v2 + 1.45827020313879)\
    + 0.577782363845043*relu(2.07248284485251*f_x1 - 0.473712097150558*f_x2 + 0.230081727463192*f_v1 + 0.0598880389207554*f_v2 - 1.22880612439671)\
    - 0.903855770921141

print("start verify")
s = Solver()
s.add(And(0 <= x1, x1 <= 1, 1 <= x2, x2 <= 1 + x1,
          v1 == 0, v2 == 0,
          x2 - x1 <= 0.8,
          -0.05 <= u1, u1 <= 0.05,-0.05 <= u2, u2 <= 0.05,
          B > 0))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify")
#unsafe condition
s = Solver()
s.add(And(0 <= x1, x1 <= 7, 0 <= x2, x2 <= 7,
          0 <= v1, v1 <= 0.1, 0 <= v2, v2 <= 0.1,
          -0.05 <= u1 ,u1 <= 0.05,-0.05 <= u2 ,u2 <= 0.05,
          (x2 - x1) * (x2 - x1) > 1.01,
             B < 0),
         )
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
else:
    print("no ans!")


print("start verify")
#diff condition
s = Solver()
s.add(And(0 <= x1, x1 <= 7, 0 <= x2, x2 <= 7,
          0 <= v1, v1 <= 0.1, 0 <= v2, v2 <= 0.1,
          -0.02 <= u1, u1 <= 0.05,-0.02 <= u2, u2 <= 0.05,
          0 <= f_x1, f_x1 <= 7, 0 <= f_x2, f_x2 <= 7,
          0 <= f_v1, f_v1 <= 0.1, 0 <= f_v2, f_v2 <= 0.1,
          B_f - B > 0 ))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")


print("success")