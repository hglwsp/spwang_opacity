from z3 import *
import torch.nn as nn

x1,x2,x3,x4 = Reals('x1 x2 x3 x4')

#relu
def relu(x):
    res = If(x>0,x,0)
    return res

#para
alpha = 0.05
Te=15
ah=0.0036
Th=55
ae=0.008


#controller
u1 = 0.0001*(593.32455521463 - 4.41108962128645*x1)
u2 = 0.0001*(593.32455521463 - 4.41108962128645*x2)
u3 = 0.0001*(593.32455521463 - 4.41108962128645*x3)
u4 = 0.0001*(593.32455521463 - 4.41108962128645*x4)


#system
f_x1 = (1-2*alpha-ae-ah*u1)*x1+ alpha*x3+ ae*Te + ah*Th*u1
f_x2 = (1-2*alpha-ae-ah*u2)*x2+ alpha*x4+ ae*Te + ah*Th*u2
f_x3 = (1-2*alpha-ae-ah*u3)*x3+ alpha*x1+ ae*Te + ah*Th*u3
f_x4 = (1-2*alpha-ae-ah*u4)*x4+ alpha*x2+ ae*Te + ah*Th*u4


#barrier
B = 1.47086208117659*relu(-1.33461311188595*x1 - 1.08240581827072*x2 + 0.771919059938111*x3 - 0.716408363729501*x4 - 1.37471231833445)\
    - 0.506753031239249*relu(-0.834729969789896*x1 + 1.20953185590642*x2 + 2.24216461593474*x3 + 0.658694845910749*x4 - 0.112268986483467)\
    + 1.15175730388316*relu(-0.563502053609846*x1 - 0.305833294937525*x2 + 1.53160916752904*x3 - 0.633114671631101*x4 - 0.816748248391081)\
    + 1.44189849243463*relu(-0.558003249605536*x1 + 1.40304600326759*x2 - 0.889214695912757*x3 + 0.0673327886779279*x4 - 0.119971110620211)\
    - 0.828765658528244*relu(-0.522193144057591*x1 - 0.243003310650607*x2 - 0.83562083773888*x3 + 0.372438198842643*x4 - 0.66584731829922) \
    + 0.919426227297471*relu(0.0939433571346322*x1 + 1.01316369156915*x2 + 0.46339954858798*x3 - 0.218456614549184*x4 - 1.65558370197234) \
    + 0.877860272412347*relu(0.135134924877339*x1 - 0.308196981393314*x2 - 0.581228526281838*x3 - 1.24172220121961*x4 - 0.893042667007009) \
    - 1.18269598455357*relu(0.143666497437037*x1 + 0.169713237006316*x2 - 1.1293636502086*x3 + 1.25882187197354*x4 + 0.120373864067509) \
    + 1.47139774447903*relu(0.201982490632269*x1 + 1.13657450862706*x2 - 0.0296779998740051*x3 + 1.09889494838488*x4 + 2.04115895764262) \
    - 0.979582684499806*relu(0.203361699598074*x1 + 0.447478557660954*x2 - 0.61436071480977*x3 - 0.696344423791562*x4 - 0.775895059168749)\
    + 1.0027974652181*relu(0.388888454969008*x1 + 0.580591148322101*x2 + 0.758140156039916*x3 - 1.74167127911095*x4 - 0.171984644103215) \
    + 2.53405269929897*relu(0.415672590519427*x1 - 0.935386660268965*x2 - 0.342931115564931*x3 + 0.869378790800371*x4 - 0.0117095683622245)\
    - 0.450463315393735*relu(0.710136647264607*x1 + 1.53230544797928*x2 + 0.0605729990053092*x3 + 1.34344011601423*x4 - 0.425305097227698) \
    - 0.114746720195518*relu(1.08303850725281*x1 + 1.84130447417387*x2 + 0.301560286382269*x3 - 1.63878119037169*x4 + 0.640096838155042) \
    - 0.16819622450451*relu(1.20729532562324*x1 + 1.0962113786435*x2 - 0.263347640937083*x3 - 0.96417708614709*x4 + 0.517444672099788) \
    - 0.1955601374642*relu(1.8977584794455*x1 - 0.0346613359783599*x2 + 0.318015380770457*x3 + 1.1003749490092*x4 - 0.154018945892946) \
    - 2.81617312536825

B_f =  1.47086208117659*relu(-1.33461311188595*f_x1 - 1.08240581827072*f_x2 + 0.771919059938111*f_x3 - 0.716408363729501*f_x4 - 1.37471231833445)\
       - 0.506753031239249*relu(-0.834729969789896*f_x1 + 1.20953185590642*f_x2 + 2.24216461593474*f_x3 + 0.658694845910749*f_x4 - 0.112268986483467)\
       + 1.15175730388316*relu(-0.563502053609846*f_x1 - 0.305833294937525*f_x2 + 1.53160916752904*f_x3 - 0.633114671631101*f_x4 - 0.816748248391081)\
       + 1.44189849243463*relu(-0.558003249605536*f_x1 + 1.40304600326759*f_x2 - 0.889214695912757*f_x3 + 0.0673327886779279*f_x4 - 0.119971110620211)\
       - 0.828765658528244*relu(-0.522193144057591*f_x1 - 0.243003310650607*f_x2 - 0.83562083773888*f_x3 + 0.372438198842643*f_x4 - 0.66584731829922) \
       + 0.919426227297471*relu(0.0939433571346322*f_x1 + 1.01316369156915*f_x2 + 0.46339954858798*f_x3 - 0.218456614549184*f_x4 - 1.65558370197234)\
       + 0.877860272412347*relu(0.135134924877339*f_x1 - 0.308196981393314*f_x2 - 0.581228526281838*f_x3 - 1.24172220121961*f_x4 - 0.893042667007009)\
       - 1.18269598455357*relu(0.143666497437037*f_x1 + 0.169713237006316*f_x2 - 1.1293636502086*f_x3 + 1.25882187197354*f_x4 + 0.120373864067509) \
       + 1.47139774447903*relu(0.201982490632269*f_x1 + 1.13657450862706*f_x2 - 0.0296779998740051*f_x3 + 1.09889494838488*f_x4 + 2.04115895764262)\
       - 0.979582684499806*relu(0.203361699598074*f_x1 + 0.447478557660954*f_x2 - 0.61436071480977*f_x3 - 0.696344423791562*f_x4 - 0.775895059168749)\
       + 1.0027974652181*relu(0.388888454969008*f_x1 + 0.580591148322101*f_x2 + 0.758140156039916*f_x3 - 1.74167127911095*f_x4 - 0.171984644103215) \
       + 2.53405269929897*relu(0.415672590519427*f_x1 - 0.935386660268965*f_x2 - 0.342931115564931*f_x3 + 0.869378790800371*f_x4 - 0.0117095683622245)\
       - 0.450463315393735*relu(0.710136647264607*f_x1 + 1.53230544797928*f_x2 + 0.0605729990053092*f_x3 + 1.34344011601423*f_x4 - 0.425305097227698)\
       - 0.114746720195518*relu(1.08303850725281*f_x1 + 1.84130447417387*f_x2 + 0.301560286382269*f_x3 - 1.63878119037169*f_x4 + 0.640096838155042) \
       - 0.16819622450451*relu(1.20729532562324*f_x1 + 1.0962113786435*f_x2 - 0.263347640937083*f_x3 - 0.96417708614709*f_x4 + 0.517444672099788) \
       - 0.1955601374642*relu(1.8977584794455*f_x1 - 0.0346613359783599*f_x2 + 0.318015380770457*f_x3 + 1.1003749490092*f_x4 - 0.154018945892946) \
       - 2.81617312536825

print("start verify initial region.")
s = Solver()
s.add(And(21.5 <= x1, x1 <= 22, 21 <= x2, x2 <= 21.5,
          21 <= x3, x3 <= 22, 21 <= x4, x4 <= 22,
          (x4 - x3) * (x4 - x3) <= 0.9*0.9,
          B > 0))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify unsafe region.")
#unsafe condition
s = Solver()
s.add(And(10 <= x1, x1 <= 30, 10 <= x2, x2 <= 30,
          10 <= x3, x3 <= 30, 10 <= x4, x4 <= 30,
          (x4 - x3) * (x4 - x3) > 1.2*1.2,
             B < 0),
         )
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
else:
    print("no ans!")


print("start verify domain.")
#diff condition
s = Solver()
s.add(And(10 <= x1, x1 <= 30, 10 <= x2, x2 <= 30,
          10 <= x3, x3 <= 30, 10 <= x4, x4 <= 30,
          0 <= u1, u1 <= 1, 0 <= u2, u2 <= 1,
          0 <= u3, u3 <= 1, 0 <= u4, u4 <= 1,
          10 <= f_x1, f_x1 <= 30, 10 <= f_x2, f_x2 <= 30,
          10 <= f_x3, f_x3 <= 30, 10 <= f_x4, f_x4 <= 30,
          B_f - B > 0.001 ))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")


print("success")