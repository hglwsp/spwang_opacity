from z3 import *
import torch.nn as nn

# x1,x2,x3,x4,x5 = Reals('x1 x2 x3 x4 x5')
x1, x2, x3, x4, x5 = Reals('x1 x2 x3 x4 x5')
h = (x1 - x2) * (x1 - x2)

#relu
def relu(x):
    res = If(x>0,x,0)
    return res




#controller
u = 0.195007112383063*x1 + 0.348002454435744*x3 - 0.195007112383063*x2 - 0.348002454435744*x4 + x5


#system
f_x1 = x1 + x3 + 0.5 * x5
f_x2 = x2 + x4 + 0.5 * u
f_x3 = x3 + x5
f_x4 = x4 + u

#barrier
# B = -0.186398671354142*x1*x1*x1 + 0.582795549207855*x1*x1*x2 + 0.946421809512145*x1*x1 \
#     - 1.70536780142502*x1*x2*x2 - 2.60168279908074*x1*x2 \
#     + 1.29528270480471*x1 + 0.137937830533062*x2*x2*x2 + 8.7178498673519*x2*x2 \
#     - 6.32656995112874*x2 - 0.107492349181588
#
# B_diff = -0.559196014062427*x1*x1*x1*x2 + 0.559196014062427*x1*x1*x1 + 1.16559109841571*x1*x1*x2*x2 + 0.144456971400725*x1*x1*x2\
#     - 1.89284361902429*x1*x1 - 1.70536780142502*x1*x2*x2*x2 + 2.51442060519431*x1*x2*x2 + 6.49864830296619*x1*x2\
#     - 1.29528270480471*x1 - 0.413813491599185*x2*x2*x2  - 17.4356997347038*x2*x2 + 6.32656995112874*x2
B = 1.3531227415898*relu(-1.52028690556238*x1 + 1.59136914941683*x2 - 0.538354493846017*x3 + 1.18766274292125*x4 - 0.744250928427063) \
    + 0.205419609202245*relu(-1.09484802501299*x1 + 0.774538939266874*x2 + 1.59680500926349*x3 - 0.30895371273338*x4 + 2.36149136975598) \
    + 1.01932915056732*relu(-0.849864066802913*x1 - 0.428478521203055*x2 - 0.135209864025233*x3 - 0.715551423687381*x4 + 0.066878311173607)\
    - 1.07900515527926*relu(-0.409563793248731*x1 + 0.328030016850924*x2 - 0.873083220783426*x3 - 2.15604888419722*x4 + 0.896074163745408)\
    + 0.25731484478305*relu(-0.292175843868154*x1 - 0.378361114906518*x2 - 0.00451022867393664*x3 + 0.109275130742837*x4 - 0.967059393727712)\
    - 0.160118929021494*relu(-0.0414571630974129*x1 - 1.58272416985636*x2 - 1.01481059679837*x3 + 1.86674506915496*x4 + 0.602956599639434) \
    + 0.211638762383176*relu(0.0868259259659069*x1 - 1.29365190541275*x2 - 0.0975108985720387*x3 + 1.17478988049495*x4 - 0.077888762395346)\
    - 0.0431306271928911*relu(0.132489396640116*x1 - 0.624048862861747*x2 - 0.954913473364491*x3 + 0.266920435009864*x4 + 0.979587182161803)\
    - 0.211075445826169*relu(0.289459655804201*x1 + 1.32111072484801*x2 + 1.23501755545364*x3 - 0.749242428211397*x4 + 0.35702105144041) \
    + 0.0869593071341314*relu(0.454335736500402*x1 + 0.0898427873363083*x2 - 0.983061199472412*x3 - 1.06994313363351*x4 + 0.808641059063443) \
    + 0.250477844518647*relu(0.505006169559997*x1 + 0.360419013408344*x2 - 2.15434808116355*x3 + 0.367649655520433*x4 + 1.26331656604494)\
    - 0.445623805952037*relu(0.600563772787695*x1 - 0.535848488216798*x2 - 1.43942649828317*x3 + 0.510826734841279*x4 - 1.10286084236845) \
    + 0.944574212543442*relu(0.858017875427412*x1 - 0.79029014150514*x2 + 0.809148543196005*x3 - 1.10929616573546*x4 - 0.497492206014629) \
    - 0.00141575376725938*relu(1.01814157009626*x1 - 2.33493038860838*x2 + 0.41162529954834*x3 + 0.95844589064917*x4 + 1.51942043586461) \
    - 0.83734564066543*relu(1.16055060966075*x1 - 1.11545991858269*x2 + 1.11951751386892*x3 + 1.04893719815153*x4 + 0.506786272602028) \
    + 1.39479003597991*relu(1.64226227848018*x1 - 1.59402167947731*x2 + 2.09177170443532*x3 - 1.95854219425415*x4 - 0.392067700182745) \
    + 0.285323321791364

B_f =  1.3531227415898*relu(-1.52028690556238*f_x1 + 1.59136914941683*f_x2 - 0.538354493846017*f_x3 + 1.18766274292125*f_x4 - 0.744250928427063)\
       + 0.205419609202245*relu(-1.09484802501299*f_x1 + 0.774538939266874*f_x2 + 1.59680500926349*f_x3 - 0.30895371273338*f_x4 + 2.36149136975598)\
       + 1.01932915056732*relu(-0.849864066802913*f_x1 - 0.428478521203055*f_x2 - 0.135209864025233*f_x3 - 0.715551423687381*f_x4 + 0.066878311173607) \
       - 1.07900515527926*relu(-0.409563793248731*f_x1 + 0.328030016850924*f_x2 - 0.873083220783426*f_x3 - 2.15604888419722*f_x4 + 0.896074163745408) \
       + 0.25731484478305*relu(-0.292175843868154*f_x1 - 0.378361114906518*f_x2 - 0.00451022867393664*f_x3 + 0.109275130742837*f_x4 - 0.967059393727712) \
       - 0.160118929021494*relu(-0.0414571630974129*f_x1 - 1.58272416985636*f_x2 - 1.01481059679837*f_x3 + 1.86674506915496*f_x4 + 0.602956599639434) \
       + 0.211638762383176*relu(0.0868259259659069*f_x1 - 1.29365190541275*f_x2 - 0.0975108985720387*f_x3 + 1.17478988049495*f_x4 - 0.077888762395346)\
       - 0.0431306271928911*relu(0.132489396640116*f_x1 - 0.624048862861747*f_x2 - 0.954913473364491*f_x3 + 0.266920435009864*f_x4 + 0.979587182161803)\
       - 0.211075445826169*relu(0.289459655804201*f_x1 + 1.32111072484801*f_x2 + 1.23501755545364*f_x3 - 0.749242428211397*f_x4 + 0.35702105144041) \
       + 0.0869593071341314*relu(0.454335736500402*f_x1 + 0.0898427873363083*f_x2 - 0.983061199472412*f_x3 - 1.06994313363351*f_x4 + 0.808641059063443)\
       + 0.250477844518647*relu(0.505006169559997*f_x1 + 0.360419013408344*f_x2 - 2.15434808116355*f_x3 + 0.367649655520433*f_x4 + 1.26331656604494) \
       - 0.445623805952037*relu(0.600563772787695*f_x1 - 0.535848488216798*f_x2 - 1.43942649828317*f_x3 + 0.510826734841279*f_x4 - 1.10286084236845) \
       + 0.944574212543442*relu(0.858017875427412*f_x1 - 0.79029014150514*f_x2 + 0.809148543196005*f_x3 - 1.10929616573546*f_x4 - 0.497492206014629) \
       - 0.00141575376725938*relu(1.01814157009626*f_x1 - 2.33493038860838*f_x2 + 0.41162529954834*f_x3 + 0.95844589064917*f_x4 + 1.51942043586461) \
       - 0.83734564066543*relu(1.16055060966075*f_x1 - 1.11545991858269*f_x2 + 1.11951751386892*f_x3 + 1.04893719815153*f_x4 + 0.506786272602028)\
       + 1.39479003597991*relu(1.64226227848018*f_x1 - 1.59402167947731*f_x2 + 2.09177170443532*f_x3 - 1.95854219425415*f_x4 - 0.392067700182745)\
       + 0.285323321791364

print("start verify")
s = Solver()
s.add(And(0 <= x1, x1 <= 1, 1 <= x2, x2 <= 10,
          0 <= x3, x3 <= 0, 0 <= x4, x4 <= 0,
          (x2 - x1) * (x2 - x1) < 1,
             B > 1))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")

print("start verify")
#unsafe condition
s = Solver()
s.add(And(0 <= x1, x1 <= 10, 0 <= x2, x2 <= 10,
          0 <= x3, x3 <= 0.1, 0 <= x4, x4 <= 0.1,
          -0.05 <= x5, x5 <= 0.05,-0.05 <= u, u <= 0.05,
          (x2 - x1) * (x2 - x1) > 1*1,
             B < 1),
         )
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
else:
    print("no ans!")


print("start verify")
#diff condition
s = Solver()
s.add(And(0 <= x1, x1 <= 10, 0 <= x2, x2 <= 10,
          0 <= x3, x3 <= 0.1, 0 <= x4, x4 <= 0.1,
          -0.05 <= x5, x5 <= 0.05,-0.05 <= u, u <= 0.05,
          B_f - 0.6*B > 0 ))
# print(s.check())
if s.check() == sat: #check()方法用来判断是否有解，sat(satisify)表示满足有解
    ans = s.model() #model()方法得到解
    print(s.check())
    print(ans)
    #也可以用变量名作为下标得到解
else:
    print("no ans!")


print("success")